[tool.poetry]
name = "whisper-server"
version = "0.1.0"
description = "WhisperX FastAPI Server"
authors = ["Nikita Matsko <nikmd1306@gmail.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = ">=3.12, <3.13"
torch = "^2.7.1"
whisperx = "^3.4.2"
pydub = "^0.25.1"
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
numba = "^0.61.2"
openai-whisper = "^20250625"
pydantic = {extras = ["email"], version = "^2.0.0"}
pydantic-settings = "^2.0.0"
python-multipart = "^0.0.6"
python-json-logger = "^2.0.7"
psutil = "7.0.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
black = "^24.8.0"
isort = "^5.13.2"
ruff = "^0.6.9"
mypy = "^1.11.2"
bandit = "^1.7.10"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
httpx = "^0.27.2"
openai = "^1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration (compatible with Black)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app"]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
fixable = ["ALL"]
unfixable = []
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "RUF001", # ambiguous unicode characters (transcribe.py has Russian text)
    "RUF002", # ambiguous unicode characters (transcribe.py has Russian text)
    "RUF003", # ambiguous unicode characters (transcribe.py has Russian text)
    "PTH108", # os.unlink vs Path.unlink (transcribe.py compatibility)
    "PTH123", # open vs Path.open (transcribe.py compatibility)
    "C408",   # dict() vs {} (transcribe.py compatibility)
    "B007",   # unused loop variable (transcribe.py compatibility)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"transcribe.py" = ["ALL"]  # Skip all checks for original transcribe.py

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "whisperx.*",
    "pydub.*",
    "torch.*",
    "numba.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore:'audioop' is deprecated:DeprecationWarning:pydub.utils",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks async tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
